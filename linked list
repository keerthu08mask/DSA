#include <stdio.h>
#include <stdlib.h>

struct Node
{
int data; 
struct Node* next;

};

void insertAtBeginning(struct Node**head, int newData) 
struct Node* newNode (struct Node*)malloc(sizeof(struct Node));

 newNode->data = newData;

 newNode->next = *head;

*head newNode;


 void deleteMiddleNode(struct Node** head) 
{

if (*head NULL || (*head)->next == NULL) 
{

printf("List is empty or contains only one element.\n");
return;
}
struct Node* slowPtr *head; 

 struct Node* fastPtr = *head; 

 struct Node* prevNode; 
}
while (fastPtr != NULL && fastPtr->next != NULL) 
{ 

fastPtr->next->next; 
prevNode = slowPtr; 

slowPtr slowPtr->next; 

prevNode->next slowPtr->next; 

free(slowPtr); 
}
void displayList(struct Node* head) 
{ 
if (head == NULL) 
{ 
printf("List is empty.\n"); 
return;
}
struct Node* temp = head;
}
while (temp != NULL) 
{
printf("%d ", temp->data);
temp temp->next;

printf("\n");
}
int main() 
{
struct Node* head = NULL; 


insertAtBeginning(&head, 4);
insertAtBeginning(&head, 3);
insertAtBeginning(&head, 2);

insertAtBeginning(&head, 1); 
printf("Original List: "); 
displayList(head);

deleteMiddleNode(&head);

printf("List after deleting middlenode: "); 
displayList(head);

return 0;
}
